# Check for updated dependencies

name: Update check

on:
  push:
    branches: [main]
    paths: ['meson/subprojects/*.wrap']
  schedule:
    - cron: '0 12 * * 1'
  workflow_dispatch:

permissions:
  contents: read

env:
  GH_USER: openslide-bot
  GIT_BRANCH: update-${{ github.repository_owner }}
  GIT_AUTHOR_NAME: OpenSlide Automation
  GIT_AUTHOR_EMAIL: openslide@openslide.org
  GIT_COMMITTER_NAME: OpenSlide Automation
  GIT_COMMITTER_EMAIL: openslide@openslide.org

jobs:
  update:
    name: Update
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OPENSLIDE_BOT_TOKEN }}
      - name: Update wraps
        run: |
          pip install --user meson
          meson wrap update --sourcedir meson
      - name: Check for stale dependencies
        run: ./build.sh updates | tee stale-report
      - name: Sync issue and PR
        env:
          GITHUB_TOKEN: ${{ secrets.OPENSLIDE_BOT_TOKEN }}
        run: |
          set -x

          # Find existing issue and PR
          report_object() {
              if [ -n "$2" ]; then
                  echo "Found existing $1 $2"
              else
                  echo "No existing $1"
              fi
          }
          issue=$(gh issue list -R "${{ github.repository }}" -A "$GH_USER" \
              -S '"These wraps need updating" in:body' -s open \
              --json number -q .[0].number)
          pr=$(gh pr list -R "${{ github.repository }}" -A "$GH_USER" \
              -H "$GIT_BRANCH" -s open --json number -q .[0].number)
          report_object issue "$issue"
          report_object PR "$pr"

          # List modified/stale packages
          make_list() {
              echo $@ | sed -e 's/ /, /g'
          }
          modified=$(make_list \
              $(git status --porcelain "meson/subprojects/*.wrap" |
                  sed -e 's:.*/::' -e 's/\.wrap$//'))
          stale=$(make_list $(awk '{print $1}' stale-report | sort))
          echo "Modified: $modified"
          echo "Stale: $stale"

          # Sync issue
          if [ -n "$stale" ]; then
              # Create/update issue
              title="Update $stale upstream"
              body="These wraps need updating in \
          [wrapdb](https://github.com/mesonbuild/wrapdb), or in this repo if \
          not imported from wrapdb:

              $(cat stale-report)"
              if [ -z "$issue" ]; then
                  echo "Creating issue..."
                  gh issue create -b "$body" -t "$title"
              else
                  echo "Updating issue..."
                  gh issue edit "$issue" -b "$body" -t "$title"
              fi
          elif [ -n "$issue" ]; then
              echo "Closing issue..."
              gh issue close "$issue" -r completed \
                  -c "Everything looks up-to-date now."
          fi

          # Sync PR
          if [ -n "$modified" ]; then
              # Create/update PR
              repo="${{ github.repository }}"
              repo="${repo#*/}"
              title="Update $modified"
              git checkout -b "$GIT_BRANCH"
              git add "meson/subprojects/*.wrap"
              git commit -sm "$title"
              git push -f \
                  "https://github.com/${GH_USER}/${repo}" "$GIT_BRANCH"
              if [ -z "$pr" ]; then
                  echo "Creating PR..."
                  gh pr create -B main -H "$GH_USER:$GIT_BRANCH" \
                      -b "" -t "$title"
              else
                  echo "Updating PR..."
                  gh pr edit "$pr" -b "" -t "$title"
              fi
          elif [ -n "$pr" ]; then
              echo "Closing PR..."
              gh pr close "$pr" -c "Everything looks up-to-date now."
          fi
